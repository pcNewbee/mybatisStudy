<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pc.dao.BlogMapper">
    <insert id="addBlog" parameterType="blog">
    insert into blog (id, title, author, create_time, views)
    values (#{id},#{title},#{author},#{createTime},#{views});
</insert>
    <!--需求1：
 根据作者名字和博客名字来查询博客！
 如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询
 select * from blog where title = #{title} and author = #{author}
 这个“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。
 此外，如果标签返回的内容是以AND 或OR 开头的，则它会剔除掉。【使用的最多的案例】
 -->
    <select id="queryBlogIf" parameterType="map" resultType="blog">
        select * from mybatis.blog
        <where>
            <if test="title != null">
                title = #{title}
            </if>
            <if test="author != null">
                and author = #{author}
            </if>
        </where>
    </select>
    <!--有时候，我们不想用到所有的查询条件，只想选择其中的一个，查询条件有一个满足即可，
    使用 choose 标签可以解决此类问题，类似于 Java 的 switch 语句 -->
    <select id="queryBlogChoose" parameterType="map" resultType="blog">
        select * from blog
        <where>
            <choose>
                <when test="title != null">
                    title = #{title}
                </when>
                <when test="author != null">
                    and author = #{author}
                </when>
                <otherwise>
                    and views = #{views}
                </otherwise>
            </choose>
        </where>
    </select>
    <!--注意set是用的逗号隔开-->
    <update id="updateBlog" parameterType="map">
        update mybatis.blog
        <set>
            <if test="title != null">
                title = #{title},
            </if>
            <if test="author != null">
                author = #{author}
            </if>
        </set>
        where id = #{id};
    </update>
    <!--SQL片段
    有时候可能某个 sql 语句我们用的特别多，为了增加代码的重用性，
    简化代码，我们需要将这些代码抽取出来，然后使用时直接调用。
     ①、最好基于 单表来定义 sql 片段，提高片段的可重用性
     ②、在 sql 片段中不要包括 where       -->
    <!--<sql id="if-title-author">-->
        <!--<if test="title != null">-->
            <!--title = #{title}-->
        <!--</if>-->
        <!--<if test="author != null">-->
            <!--and author = #{author}-->
        <!--</if>-->
    <!--</sql>-->
    <!--<select id="queryBlogIf" parameterType="map" resultType="blog">-->
        <!--select * from mybatis.blog-->
        <!--<where>-->
            <!--&lt;!&ndash; 引用 sql 片段，如果refid 指定的不在本文件中，那么需要在前面加上 namespace &ndash;&gt;-->
            <!--<include refid="if-title-author"></include>-->
            <!--&lt;!&ndash; 在这里还可以引用其他的 sql 片段 &ndash;&gt;-->
        <!--</where>-->
    <!--</select>-->
    <select id="queryBlogForeach" parameterType="map" resultType="blog">
        select * from mybatis.blog
        <where>
            <!--
            collection:指定输入对象中的集合属性
            item:每次遍历生成的对象
            open:开始遍历时的拼接字符串
            close:结束时拼接的字符串
            separator:遍历对象之间需要拼接的字符串
            select * from blog where 1=1 and (id=1 or id=2 or id=3)
          -->
            <foreach collection="ids"  item="id" open="and (" close=")" separator="or">
                id=#{id}
            </foreach>
        </where>
    </select>
</mapper>